package the.View.Control;import java.awt.*;import java.awt.event.*;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import javax.swing.*;import javax.swing.table.DefaultTableModel;import the.DTO.DataStorage;import the.Model.*;import the.View.MainForm;import the.View.ProfileDialog;import the.View.RoomButton;public class SoDoPane extends JLayeredPane {	private ArrayList<Phong> listPhong = DataStorage.loader.getListPhong();	private final JComboBox cbLoai;	private final JComboBox ttCb;	private final JPanel panel_1;	public static SoDoPane s;	private final JPopupMenu roomPop;	private JFrame frDk;	private  ArrayList<QuanLyPhong> currentRoomInfo = DataStorage.loader.getCurrentRoomInfo();	public ItemListener cbChanged = new ItemListener() {				@Override		public void itemStateChanged(ItemEvent e) {			ArrayList<Phong> Filter =filtRoom(cbLoai.getSelectedIndex(),ttCb.getSelectedIndex());			panel_1.removeAll();			panel_1.repaint();			for (Phong phong : Filter) {				RoomButton btn = new RoomButton(phong.getMaPhong(), phong.getTrangThai(), phong.getLoai(), phong.getDonGia(), 0);				btn.setPreferredSize(new Dimension(130,130));				btn.addMouseListener(roomSelection);				panel_1.add(btn);				addPopup(btn,roomPop);			}		}			};	public ArrayList<Phong> filtRoom(int iLoai, int iTT) {		ArrayList<Phong> rs = new ArrayList<Phong>();		if(iLoai==8 && iTT==6) rs = listPhong;		if(iLoai == 8 && iTT != 6) {			for (Phong phong : listPhong) {				if(phong.getTrangThai()==iTT) rs.add(phong);			}		}		if(iLoai != 8 && iTT == 6) {			for (Phong phong : listPhong) {				if(phong.getLoai()==iLoai+1) rs.add(phong);			}		}		if(iLoai != 8 && iTT != 6) {			for (Phong phong : listPhong) {				if(phong.getLoai()==iLoai+1 && phong.getTrangThai()==iTT) rs.add(phong);			}					}		return rs;	}	public SoDoPane() {		s=this;		setLayout(new BorderLayout());		JMenuBar menuBar_Sodo = new JMenuBar();		menuBar_Sodo.setBackground(Color.WHITE);		add(menuBar_Sodo,BorderLayout.NORTH);				JButton btnDK = new JButton("Đăng kí phòng");		menuBar_Sodo.add(btnDK);		btnDK.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				MainForm.m.setEnabled(false);				frDk = new JFrame();				frDk.add(pnDK);				frDk.setResizable(false);				frDk.pack();				frDk.setLocationRelativeTo(null);				frDk.setVisible(true);				frDk.addWindowListener(new WindowAdapter() {					@Override					public void windowClosing(WindowEvent e) {						onCancel();					}				});			}		});				JButton btnProfile = new JButton("Hồ sơ Phòng");		menuBar_Sodo.add(btnProfile);		btnProfile.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				MainForm.m.setEnabled(false);				String selected = MainForm.m.getSelectedRoom();				if(selected!=""){					new ProfileDialog(selected,0);				}				else{					new ProfileDialog();				}			}		});				JButton btnNhom = new JButton("Nhóm");		menuBar_Sodo.add(btnNhom);				JButton btnDat = new JButton("Check in");		menuBar_Sodo.add(btnDat);		btnDat.addActionListener(new ActionListener() {						@Override			public void actionPerformed(ActionEvent e) {				String phong = MainForm.m.getSelectedRoom();				boolean b = false;				for (Phong item : listPhong) {					if(phong.equals(item.getMaPhong())&&item.getTrangThai()!=0) {						b=true;					}				}				if(b) {					JOptionPane.showMessageDialog(getComponent(1), "Phòng chưa sẵn sàng");				}				else if(phong!="") {					new OrderDialog(phong);					MainForm.m.setEnabled(false);				}				else {					JOptionPane.showMessageDialog(getComponent(1), "Chọn phòng trước");				}			}		});				JPanel filterPanel = new JPanel();		filterPanel.setBackground(Color.WHITE);		FlowLayout flowLayout = (FlowLayout) filterPanel.getLayout();		flowLayout.setAlignment(FlowLayout.RIGHT);		flowLayout.setHgap(10);		menuBar_Sodo.add(filterPanel);				JLabel lblNewLabel = new JLabel("Lọc: ");		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 12));		lblNewLabel.setForeground(Color.RED);		filterPanel.add(lblNewLabel);				cbLoai = new JComboBox();		cbLoai.setModel(new DefaultComboBoxModel(new String[] {"Double", "Triple", "Family", "Double - VIP", "Triple - VIP", "Family - VIP", "Working", "Hall", "Tất cả"}));		cbLoai.setSelectedIndex(8);		filterPanel.add(cbLoai);		cbLoai.addItemListener(cbChanged);				ttCb = new JComboBox(new String[] {"Trống","Dơ","Đã Đặt","Bảo Trì","Đang Sử Dụng","Nhóm"});		ttCb.setModel(new DefaultComboBoxModel(new String[] {"Trống", "Dơ", "Đã Đặt", "Bảo Trì", "Đang Sử Dụng", "Nhóm", "Tất cả"}));		ttCb.setSelectedIndex(6);		filterPanel.add(ttCb);		ttCb.addItemListener(cbChanged);				JScrollPane scrollPaneSoDo = new JScrollPane();		add(scrollPaneSoDo,BorderLayout.CENTER);		scrollPaneSoDo.getVerticalScrollBar().setUnitIncrement(20);				 panel_1 = new JPanel();		panel_1.setBackground(Color.WHITE);		scrollPaneSoDo.setViewportView(panel_1);		panel_1.setPreferredSize(new Dimension(130*5+25,(listPhong.size()+1)*130/5+listPhong.size()+100));		panel_1.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));		roomPop = new JPopupMenu();		JMenu mnTrangThai = new JMenu("Trạng thái");		JMenuItem mniGhiChu = new JMenuItem("Ghi Chú");		roomPop.add(mnTrangThai);		roomPop.add(mniGhiChu);		HashMap<Integer,JMenuItem> tt = new HashMap<>();		tt.put(0,new JMenuItem("Trống"));		tt.put(1,new JMenuItem("Dơ"));		tt.put(2,new JMenuItem("Đặt trước"));		tt.put(3,new JMenuItem("Bảo trì"));		tt.put(4,new JMenuItem("Đang sử dụng"));		tt.put(5,new JMenuItem("Đoàn"));		for (JMenuItem item: tt.values()			 ) {			mnTrangThai.add(item);			item.addActionListener(new ActionListener() {				@Override				public void actionPerformed(ActionEvent e) {					DataStorage.loader.setSttPhong(MainForm.m.getSelectedRoom(),getKey(tt,item));					reloadRoomList();				}			});		}				for (Phong phong : listPhong) {			RoomButton btn = new RoomButton(phong.getMaPhong(), phong.getTrangThai(), phong.getLoai(), phong.getDonGia(), 0);			btn.setPreferredSize(new Dimension(130,130));			btn.addMouseListener(roomSelection);			panel_1.add(btn);			addPopup(btn,roomPop);		}		btnChon.addActionListener(btnDKForm);		btnnewKH.addActionListener(btnDKForm);		btnHuyDK.addActionListener(btnDKForm);		btnOKDK.addActionListener(btnDKForm);		btnTim.addActionListener(btnDKForm);		DefaultComboBoxModel<Doan> cbDoanModel = new DefaultComboBoxModel<>();		cbDoanModel.addAll(DataStorage.loader.getListDoan());		cbDoan.setModel(cbDoanModel);		cbDoan.setSelectedIndex(0);		txtNgaydat.setText(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));		txtIDDK.setText(DataStorage.loader.nextDangKy()+"");		txtCMND.addKeyListener(tfDig);		txtTim.addKeyListener(tfDig);		txtSoPhong.addKeyListener(tfDig);		txtSoKhach.addKeyListener(tfDig);		txtNam.addKeyListener(tfDig);		txtNu.addKeyListener(tfDig);		txtTreEm.addKeyListener(tfDig);		txtCoc.addKeyListener(tfDig);		txtSoKhach.setText("0");		txtTreEm.setText("0");		txtNam.setText("0");		txtNu.setText("0");		setVisible(true);	}	public void reloadRoomList(){		listPhong = DataStorage.loader.getListPhong();		panel_1.removeAll();		panel_1.repaint();		for (Phong phong : listPhong) {			RoomButton btn = new RoomButton(phong.getMaPhong(), phong.getTrangThai(), phong.getLoai(), phong.getDonGia(), 0);			btn.setPreferredSize(new Dimension(130,130));			btn.addMouseListener(roomSelection);			panel_1.add(btn);			addPopup(btn,roomPop);		}	}	/**	 * Event btn chọn phòng	 * Hiển thị thông tin KH lên CustomInfoPanel	 * Hiển thị bảng dịch vụ phòng đó	 * Hiển thị tổng vào txtSum của SumPanel	 */	public  MouseListener roomSelection = new MouseListener() {		@Override		public void mouseReleased(MouseEvent e) {			// TODO Auto-generated method stub			MainForm.m.setSelectedRoom(((RoomButton)e.getComponent()).getMaPhong());		}		@Override		public void mousePressed(MouseEvent e) {			// TODO Auto-generated method stub			MainForm.m.setSelectedRoom(((RoomButton)e.getComponent()).getMaPhong());		}		@Override		public void mouseExited(MouseEvent e) {			// TODO Auto-generated method stub		}		@Override		public void mouseEntered(MouseEvent e) {			// TODO Auto-generated method stub			RoomButton btn =(RoomButton) e.getComponent();			currentRoomInfo =DataStorage.loader.getCurrentRoomInfo();			for (QuanLyPhong ql : currentRoomInfo) {				if(ql.getMaPhong().equals(btn.getMaPhong())) {					ArrayList<DongChungTu> listDongChungTu = DataStorage.loader.getListDongCT(ql.getId());					float sum=0;					for (DongChungTu item : listDongChungTu) {						sum+=(item.getDonGia()*item.getSoLuong());					}					btn.setSum(sum);					btn.setToolTipText("Tổng tiền: "+sum+"đ");				}			}		}		@Override		public void mouseClicked(MouseEvent e) {			// TODO Auto-generated method stub			reloadTable();			MainForm.m.setSelectedRoom(((RoomButton)e.getComponent()).getMaPhong());		}	};	public void reloadTable(){		currentRoomInfo =DataStorage.loader.getCurrentRoomInfo();		MainForm.m.setSum(0);		MainForm.m.getTable().setModel(new DefaultTableModel());		CustomerInfoPanel.t.getTxtPhong().setText(MainForm.m.getSelectedRoom());		CustomerInfoPanel.t.getTxtTenKH().setText("");		CustomerInfoPanel.t.getTxtCI().setText("");		CustomerInfoPanel.t.getTxtCO().setText("");		for (QuanLyPhong ql : currentRoomInfo) {			//System.out.println(ql.getId());			if(ql.getMaPhong().equals(MainForm.m.getSelectedRoom())) {				CustomerInfoPanel.t.getTxtTenKH().setText(ql.getHoTen());				CustomerInfoPanel.t.getTxtCI().setText(ql.getCI().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));				CustomerInfoPanel.t.getTxtCO().setText(ql.getCO()+"");				MainForm.m.getTable().setModel(MainForm.m.getRoomInfoModel(ql.getId()));				MainForm.m.setQl(ql);				break;			}			MainForm.m.setQl(null);		}		SumPanel.s.getTxtSum().setText(MainForm.m.getSum()+"");		//System.out.println(MainForm.m.getQl().getId());	}	private  void addPopup(Component component, final JPopupMenu popup) {		component.addMouseListener(new MouseAdapter() {			public void mousePressed(MouseEvent e) {				if (e.isPopupTrigger()) {					showMenu(e);				}				currentRoomInfo =DataStorage.loader.getCurrentRoomInfo();				MainForm.m.setSum(0);				MainForm.m.getTable().setModel(new DefaultTableModel());				MainForm.m.setSelectedRoom(((RoomButton)e.getComponent()).getMaPhong());				CustomerInfoPanel.t.getTxtPhong().setText(MainForm.m.getSelectedRoom());				CustomerInfoPanel.t.getTxtTenKH().setText("");				CustomerInfoPanel.t.getTxtCI().setText("");				CustomerInfoPanel.t.getTxtCO().setText("");				for (QuanLyPhong ql : currentRoomInfo) {					if(ql.getMaPhong().equals(MainForm.m.getSelectedRoom())) {						CustomerInfoPanel.t.getTxtTenKH().setText(ql.getHoTen());						CustomerInfoPanel.t.getTxtCI().setText(ql.getCI().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));						CustomerInfoPanel.t.getTxtCO().setText(ql.getCO()+"");						MainForm.m.getTable().setModel(MainForm.m.getRoomInfoModel(ql.getId()));					}				}				SumPanel.s.getTxtSum().setText(MainForm.m.getSum()+"");			}			public void mouseReleased(MouseEvent e) {				if (e.isPopupTrigger()) {					showMenu(e);				}			}			private void showMenu(MouseEvent e) {				popup.show(e.getComponent(), e.getX(), e.getY());			}		});	}	public  <K, V> K getKey(Map<K, V> map, V value) {		for (Map.Entry<K, V> entry : map.entrySet()) {			if (value.equals(entry.getValue())) {				return entry.getKey();			}		}		return null;	}	/**	 * Form Dang ki	 */	private JPanel pnDK;	private JTextField txtTim;	private JButton btnTim;	private JButton btnChon;	private JButton btnnewKH;	private JTextField txtIDKH;	private JTextField txtHoTen;	private JTextField txtCMND;	private JComboBox cbGioiTinh;	private JTextField txtNgayCap;	private JTextField txtNoiCap;	private JComboBox cbLoaiKh;	private JComboBox cbDoan;	private JTextField txtQuocTich;	private JLabel lbKQ;	private JTextField txtDonVi;	private JTextField txtIDDK;	private JTextField txtSoPhong;	private JTextField txtNgaydat;	private JTextField txtSoKhach;	private JTextField txtNam;	private JTextField txtNu;	private JTextField txtTreEm;	private JTextField txtTuNgay;	private JTextField txtDenngay;	private JTextField txtCoc;	private JButton btnHuyDK;	private JButton btnOKDK;	KhachHang kh = new KhachHang();	public ActionListener btnDKForm = new ActionListener() {		@Override		public void actionPerformed(ActionEvent e) {			if(e.getActionCommand().equals("OK")){				onOK();			}			if(e.getActionCommand().equals("Cancel")){				onCancel();			}			if(e.getActionCommand().equals("Tìm kiếm")){				btnChon.setEnabled(false);				lbKQ.setText("Không tìm thấy!");				for (KhachHang k: DataStorage.loader.getListKH()					 ) {					if(txtTim.getText().equals(k.getcMND())&&k.getLoai()!=2){						kh=k;						lbKQ.setText("Khách hàng: "+kh.getHoTen());						btnChon.setEnabled(true);					}				}			}			if(e.getActionCommand().equals("Chọn")){				txtIDKH.setText(kh.getId()+"");				txtHoTen.setText(kh.getHoTen());				txtQuocTich.setText(kh.getQuocTich());				txtDonVi.setText(kh.getDonVi());				txtCMND.setText(kh.getcMND());				txtNgayCap.setText(kh.getNgayCap());				txtNoiCap.setText(kh.getNoiCap());				cbGioiTinh.setSelectedIndex(kh.getGioiTinh());				cbLoaiKh.setSelectedIndex(kh.getLoai());				cbDoan.setSelectedIndex(kh.getIdDoan());				txtHoTen.setEditable(false);				txtQuocTich.setEditable(false);				txtDonVi.setEditable(false);				txtCMND.setEditable(false);				txtNgayCap.setEditable(false);				txtNoiCap.setEditable(false);				cbGioiTinh.setEnabled(false);				cbLoaiKh.setEnabled(false);				cbDoan.setEnabled(false);			}			if(e.getActionCommand().equals("Khách hàng mới")){				txtIDKH.setText(DataStorage.loader.nextKH()+"");				txtHoTen.setText("");				txtQuocTich.setText("");				txtDonVi.setText("");				txtCMND.setText("");				txtNgayCap.setText("");				txtNoiCap.setText("");				txtHoTen.setEditable(true);				txtQuocTich.setEditable(true);				txtDonVi.setEditable(true);				txtCMND.setEditable(true);				txtNgayCap.setEditable(true);				txtNoiCap.setEditable(true);				cbGioiTinh.setEnabled(true);				cbLoaiKh.setEnabled(true);				cbDoan.setEnabled(true);			}		}	};	private void onCancel() {		MainForm.m.setEnabled(true);		resetFormDk();		frDk.dispose();	}	private void onOK() {		String checkDate = "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$";		if(txtHoTen.getText().equals("")){			JOptionPane.showMessageDialog(frDk,"Họ tên Khách hàng không được để trống");		}		else if(txtTuNgay.getText().equals("")){			JOptionPane.showMessageDialog(frDk,"Ngày vào không được để trống");		}		else if(!txtTuNgay.getText().matches(checkDate)||(!txtDenngay.getText().matches(checkDate)&&!txtDenngay.getText().equals(""))){			JOptionPane.showMessageDialog(frDk,"Nhập ngày tháng theo định dạng dd/MM/yyyy");		}		else{			KhachHang k = new KhachHang();			Doan chon = new Doan();			boolean isExist = false;			ArrayList<Doan> listDoan = DataStorage.loader.getListDoan();			String doan = cbDoan.getSelectedItem().toString();			DangKy dk = new DangKy();			for (Doan d:listDoan				 ) {				if(d.getTenDoan().equals(doan)){					chon=d;					isExist=true;				}			}			if(!isExist) {				chon = new Doan(DataStorage.loader.nextDoan(),doan);				DataStorage.loader.getListDoan().add(chon);			}			k.setId(Integer.parseInt(txtIDKH.getText()));			k.setHoTen(txtHoTen.getText());			k.setGioiTinh(cbGioiTinh.getSelectedIndex());			k.setDonVi(txtDonVi.getText());			k.setcMND(txtCMND.getText());			k.setNgayCap(txtNgayCap.getText());			k.setNoiCap(txtNoiCap.getText());			k.setLoai(cbLoaiKh.getSelectedIndex());			k.setQuocTich(txtQuocTich.getText());			k.setIdDoan(chon.getId());			dk.setId(Integer.parseInt(txtIDDK.getText()));			dk.setSoPhong(Integer.parseInt(txtSoPhong.getText()));			dk.setNgayDat(LocalDate.now());			dk.setSoKhach(Integer.parseInt(txtSoKhach.getText()));			dk.setNu(Integer.parseInt(txtNu.getText()));			dk.setTreEm(Integer.parseInt(txtTreEm.getText()));			dk.setTuNgay(LocalDate.parse(txtTuNgay.getText(),DateTimeFormatter.ofPattern("d/M/yyyy")));			dk.setToiNgay(LocalDate.parse(txtDenngay.getText(),DateTimeFormatter.ofPattern("d/M/yyyy")));			dk.setCoc(Float.parseFloat(txtCoc.getText()));			dk.setId_kh(k.getId());			dk.setId_nv(MainForm.nv.getiD());			DataStorage.loader.getListKH().add(k);			DataStorage.loader.getListDangKy().add(dk);			JOptionPane.showMessageDialog(frDk,"Đăng kí thành công");			MainForm.m.setEnabled(true);			resetFormDk();			frDk.dispose();		}	}	public void resetFormDk(){		txtTim.setText("");		btnChon.setEnabled(false);		txtHoTen.setText("");		txtHoTen.setEditable(false);		txtCMND.setText("");		txtCMND.setEditable(false);		cbGioiTinh.setEnabled(false);		txtNgayCap.setEditable(false);		txtNgayCap.setText("");		txtNoiCap.setText("");		txtNoiCap.setEditable(false);		txtDonVi.setText("");		txtDonVi.setEditable(false);		cbDoan.setEnabled(false);		cbLoaiKh.setEnabled(false);		txtQuocTich.setEditable(false);		txtQuocTich.setText("");		txtNgaydat.setText(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));	}	KeyListener tfDig = new KeyAdapter() {		@Override		public void keyTyped(KeyEvent e) {			char caracter = e.getKeyChar();			if (((caracter < '0') || (caracter > '9'))) {				e.consume();			}		}	};}